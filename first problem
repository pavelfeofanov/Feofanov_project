#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <limits>
using namespace std;
struct Point {
    double x, y;
};

double euclidean_distance(const Point& a, const Point& b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}


double calculate_tour_length(const vector<Point>& points, const vector<int>& tour) {
    double length = 0.0;
    for (int i = 0; i < tour.size(); ++i) {
        int next_index = (i + 1) % tour.size();
        length += euclidean_distance(points[tour[i]], points[tour[next_index]]);
    }
    return length;
}

vector<Point> read_points(const string& filename) {
    ifstream file(filename);
    vector<Point> points;
    int n;
    file >> n;
    points.resize(n);

    for (int i = 0; i < n; ++i) {
        file >> points[i].x >> points[i].y;
    }

    return points;
}

// Функция для реализации 2-opt алгоритма
vector<int> two_opt(const vector<Point>& points) {
    int n = points.size();
    vector<int> tour(n);
    for (int i = 0; i < n; ++i) tour[i] = i; // Начальный тур

    bool improvement = true;
    while (improvement) {
        improvement = false;
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 2; j < n + (i > 0); ++j) {
                int next_j = (j + 1) % n;
                double current_dist = euclidean_distance(points[tour[i]], points[tour[i+1]]) +
                                      euclidean_distance(points[tour[j]], points[tour[next_j]]);
                double new_dist = euclidean_distance(points[tour[i]], points[tour[j]]) +
                                  euclidean_distance(points[tour[i+1]], points[tour[next_j]]);
                if (new_dist < current_dist) {
                    reverse(tour.begin() + i + 1, tour.begin() + j + 1);
                    improvement = true;
                }
            }
        }
    }

    return tour;
}

int main() {
    string filename = "/Users/pavelfeofanov/Downloads/data/ks_4_0";//у меня только так  получилось доступ к файлу получить
    auto points = read_points(filename);
    auto tour = two_opt(points);
    double tour_length = calculate_tour_length(points, tour);

    cout  << tour_length << endl;
    for (int i : tour) {
        cout << i << " ";
    }
    cout << endl;

    return 0;
}

